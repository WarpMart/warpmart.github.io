/* breakpoints.js v1.0 | @ajlkn | MIT licensed */
var breakpoints = (function() {
    'use strict';
  
    function init(list) {
      breakpoints._.init(list);
    }
  
    var _ = {
      list: null,
      media: {},
      events: [],
  
      init: function(list) {
        _.list = list;
        window.addEventListener('resize', _.poll);
        window.addEventListener('orientationchange', _.poll);
        window.addEventListener('load', _.poll);
        window.addEventListener('fullscreenchange', _.poll);
      },
  
      active: function(query) {
        var operator, property, value, minValue, maxValue, unit, mediaQuery;
  
        if (!(query in _.media)) {
          if (query.substr(0, 2) === '>=') {
            operator = 'gte';
            property = query.substr(2);
          } else if (query.substr(0, 2) === '<=') {
            operator = 'lte';
            property = query.substr(2);
          } else if (query.substr(0, 1) === '>') {
            operator = 'gt';
            property = query.substr(1);
          } else if (query.substr(0, 1) === '<') {
            operator = 'lt';
            property = query.substr(1);
          } else if (query.substr(0, 1) === '!') {
            operator = 'not';
            property = query.substr(1);
          } else {
            operator = 'eq';
            property = query;
          }
  
          if (property && property in _.list) {
            value = _.list[property];
            if (Array.isArray(value)) {
              minValue = parseInt(value[0]);
              maxValue = parseInt(value[1]);
  
              if (isNaN(minValue)) {
                if (isNaN(maxValue)) {
                  return;
                }
                unit = value[1].substr(String(maxValue).length);
              } else {
                unit = value[0].substr(String(minValue).length);
              }
  
              if (isNaN(minValue)) {
                switch (operator) {
                  case 'gte':
                    mediaQuery = 'screen';
                    break;
                  case 'lte':
                    mediaQuery = 'screen and (max-width: ' + maxValue + unit + ')';
                    break;
                  case 'gt':
                    mediaQuery = 'screen and (min-width: ' + (maxValue + 1) + unit + ')';
                    break;
                  case 'lt':
                    mediaQuery = 'screen and (max-width: -1px)';
                    break;
                  case 'not':
                    mediaQuery = 'screen and (min-width: ' + (maxValue + 1) + unit + ')';
                    break;
                  default:
                    mediaQuery = 'screen and (max-width: ' + maxValue + unit + ')';
                }
              } else if (isNaN(maxValue)) {
                switch (operator) {
                  case 'gte':
                    mediaQuery = 'screen and (min-width: ' + minValue + unit + ')';
                    break;
                  case 'lte':
                    mediaQuery = 'screen';
                    break;
                  case 'gt':
                    mediaQuery = 'screen and (max-width: -1px)';
                    break;
                  case 'lt':
                    mediaQuery = 'screen and (max-width: ' + (minValue - 1) + unit + ')';
                    break;
                  case 'not':
                    mediaQuery = 'screen and (max-width: ' + (minValue - 1) + unit + ')';
                    break;
                  default:
                    mediaQuery = 'screen and (min-width: ' + minValue + unit + ')';
                }
              } else {
                switch (operator) {
                  case 'gte':
                    mediaQuery = 'screen and (min-width: ' + minValue + unit + ')';
                    break;
                  case 'lte':
                    mediaQuery = 'screen and (max-width: ' + maxValue + unit + ')';
                    break;
                  case 'gt':
                    mediaQuery = 'screen and (min-width: ' + (maxValue + 1) + unit + ')';
                    break;
                  case 'lt':
                    mediaQuery = 'screen and (max-width: ' + (minValue - 1) + unit + ')';
                    break;
                  case 'not':
                    mediaQuery = 'screen and (max-width: ' + (minValue - 1) + unit + '), screen and (min-width: ' + (maxValue + 1) + unit + ')';
                    break;
                  default:
                    mediaQuery = 'screen and (min-width: ' + minValue + unit + ') and (max-width: ' + maxValue + unit + ')';
                }
              }
            } else {
              mediaQuery = value.charAt(0) === '(' ? 'screen and ' + value : value;
            }
  
            _.media[query] = !!mediaQuery && mediaQuery;
          }
        }
  
        return _.media[query] !== false && window.matchMedia(_.media[query]).matches;
      },
  
      on: function(query, handler) {
        _.events.push({
          query: query,
          handler: handler,
          state: false
        });
  
        if (_.active(query)) {
          handler();
        }
      },
  
      poll: function() {
        var event, i;
        for (i = 0; i < _.events.length; i++) {
          event = _.events[i];
          if (_.active(event.query)) {
            if (!event.state) {
              event.state = true;
              event.handler();
            }
          } else if (event.state) {
            event.state = false;
          }
        }
      }
    };
  
    init._ = _;
    init.on = function(query, handler) {
      _.on(query, handler);
    };
    init.active = function(query) {
      return _.active(query);
    };
  
    return init;
  })();
  
  !function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      define([], factory);
    } else if (typeof exports === 'object') {
      module.exports = factory();
    } else {
      root.breakpoints = factory();
    }
  }(this, function() {
    return breakpoints;
  });